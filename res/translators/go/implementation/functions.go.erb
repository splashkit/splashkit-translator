<%#
    Implement each of the function bodies calling the SK code. Three-step
    process: variableize the arguments to the SK call from their lib-type
    adapted versions, make the call (and return the call if non-void).
%>
<%
  @functions.each do |function|
%>
<%= lib_signature_for(function) %> {
<%
    function[:parameters].each do |param_name, param_data|
%>
<%#
    1. Convert each parameter using the mapper functions available
%>
<%
      param_adapted =
        if param_data[:is_pointer]
          param_name
        else
          deref = '*' if (param_data[:is_reference] && ! param_data[:is_const])
          mapper_fn = sk_mapper_fn_for param_data
          "#{mapper_fn}(#{deref}#{param_name})"
        end
      ptr = '*' if param_data[:is_pointer]
      const = 'const ' if param_data[:is_const] && !param_data[:is_reference]
      type = param_data[:type]
      type_parameter = "<#{param_data[:type_parameter]}>" if param_data[:type_parameter]
      lib_param_decl = "#{const}#{type}#{type_parameter} #{ptr}__skparam__#{param_name}"
%>
    <%= lib_param_decl %> = <%= param_adapted %>;
<%
    end # end parameters.each
%>
<%#
    2. Make the function call (and assign __skreturn if non-void)
%>
<%
    return_val = if is_func?(function) then
      type_parameter = "<#{function[:return][:type_parameter]}>" if function[:return][:type_parameter]
      "#{function[:return][:type]}#{type_parameter} __skreturn = "
    end
    param_list = function[:parameters].map do |param_name, _|
      "__skparam__#{param_name}"
    end.join(', ')
    func_call  = "#{return_val}#{function[:name]}(#{param_list})"
%>
    <%= func_call %>;
<%#
    3. Update all non-const references.
        -- if it can be directly copied... do that.
        -- otherwise use the types update function
%>
<%
    non_const_refs = function[:parameters].select do | _, param_data |
      param_data[:is_reference] && !param_data[:is_const]
    end # end select
    non_const_refs.each do | param_name, param_data |
      if type_can_be_directly_copied? param_data
        mapper_fn = lib_mapper_fn_for param_data
%>
    *<%= param_name %> = <%= mapper_fn %>(__skparam__<%= param_name %>);
<%
      else # cannot be directly copied...
        update_fn = sk_update_fn_for param_data
%>
    <%= update_fn %>(__skparam__<%= param_name %>, <%= param_name %>);
<%
      end # end if can be directly copied
    end # end non_const_ptrs.each
%>
<%#
    4. Return __skreturn variable if non-void
%>
<%
    if is_func?(function)
%>
    return <%= lib_mapper_fn_for function[:return] %>(__skreturn);
<%
    end # end if func
%>
}
<%
  end # end functions.each
%>
