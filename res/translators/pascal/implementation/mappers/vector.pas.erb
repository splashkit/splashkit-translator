<%
  @vector_types.each do |type|
    sk_type = sk_type_for(type)
    lib_type = lib_type_for(type)
%>
<%#
    Create the record to map between languages.
%>
type __sklib_vector_<%= type %> = record
  data_from_app: Array of <%= lib_type %>;
  size_from_app: Cardinal;
  data_from_lib: ^<%= lib_type %>;
  size_from_lib: Cardinal;
end;
<%#
    Create a function to free our part of the mapped data. This is the
    function to free the library part of the vector mapping.
%>
procedure __sklib__free__sklib_vector_<%= type %>(v: __sklib_vector_<%= type %>); cdecl; external;
<%#
   Free our part
%>
procedure __skadapter__free__sklib_vector_<%= type %>(var v: __sklib_vector_<%= type %>);
<%
    # Freeing a std::vector<string> requires us to recursively free the
    # allocated __sklib_strings inside the std::vector.
    # String resources in the library will be freed when the vector is converted
    # and each of the strings are read back.
    if type == 'string'
%>
var
  i: Integer;
begin
  for i := 0 to v.size_from_app - 1 do
  begin
      __skadapter__free__sklib_string(v.data_from_app[i]);
  end;
<%
    else # else not a string
%>
begin
<%
    end # end if type is string
%>
  SetLength(v.data_from_app, 0);
end;
<%#
    Converts a array of type into a __sklib__vector by allocating each of its
    members onto the heap.
%>
function __skadapter__to_sklib_vector_<%= type %>(const v: ArrayOf<%= sk_type %>): __sklib_vector_<%= type %>;
var
    i: Integer;
begin
  result.size_from_lib := 0;
  result.data_from_lib := nil;
  result.size_from_app := Length(v);
  SetLength(result.data_from_app, Length(v));
  for i := 0 to High(v) do
  begin
    result.data_from_app[i] := __skadapter__to_sklib_<%= type %>(v[i]);
  end;
end;
<%#
    Converts a __sklib__vector to a dynamic array of type by copying each of
    its members into the dynamic array
%>
function __skadapter__to_vector_<%= type %>(const v: __sklib_vector_<%= type %>): ArrayOf<%= sk_type %>;
var
  i: Integer;
begin
  result := nil;
  SetLength(result, v.size_from_lib);
  for i := 0 to v.size_from_lib - 1 do
  begin
    result[i] := __skadapter__to_<%= type %>(v.data_from_lib[i]);
  end;
<%
    # We need to ask the SplashKit library to free the
    # space it allocated for this dynamic on returning a vector. Then we
    # return our copy of this.
%>
  __sklib__free__sklib_vector_<%= type %>(v);
end;
<%#
    These update functions take existing std::vector or sklib_vector values
    and update them. These are used with pass by ref parameters to update the
    sklib_vector or std::vector from the other component.
%>
procedure __skadapter__update_from_vector_<%= type %>(var v: __sklib_vector_<%= type %>; var __skreturn: ArrayOf<%= sk_type %>);
var
  i: Integer;
begin
  __skreturn := nil;
  SetLength(__skreturn, v.size_from_lib);
  for i := 0 to v.size_from_lib - 1 do
  begin
      __skreturn[i] := __skadapter__to_<%= type %>(v.data_from_lib[i]);
  end;
  <%# Now it is copied... we need to get the library to free this! %>
  __sklib__free__sklib_vector_<%= type %>(v);
end;
<%
  end # end vectors.each
%>
