<%#
    Structs must have each field converted to a compatible Lib type (i.e., the
    field type `foo' becomes `__sklib_foo'). Then mappers must be made to and
    from the Lib and SK code. Can't use a macro for this and cannot be a static
    cast so we must generate the functions individually.
 %>
<%
  @structs.each do |struct|
%>
<%#
    Definition of structs can use lib_struct_field_for for convenience
%>
typedef struct {
<%
    struct[:fields].each do |field_name, field_data|
%>
    <%= sk_struct_field_for(field_name, field_data) %>;
<%
    end # end fields.each
%>
} <%= struct[:name] %>;

inline bool operator==(const <%= struct[:name] %>& lhs, const <%= struct[:name] %>& rhs) {
    return
<%  struct[:fields].each_with_index do |(field_name, field_data), idx|
      is_last = idx == struct[:fields].length - 1
      field_name = field_name.field_case
      sk_comparison_for(field_name, field_data, is_last).each do |comparison| %>
        <%= comparison %><%= "\n" %>
<%    end %>
<%  end %>
}

inline bool operator!=(const <%= struct[:name] %>& lhs, const <%= struct[:name] %>& rhs) {
    return !(lhs == rhs);
}

<%
    end # end struct.each
%>
